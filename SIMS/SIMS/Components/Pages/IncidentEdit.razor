@page "/incidentedit"
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.WebUtilities
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.Json
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Edit Incident</PageTitle>

<h1>Incident</h1>

<div style="max-width: 500px; margin-top:20px">
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="date">Date:</label>
        <input type="date" id="date" class="form-control" style="width: 150px" @bind-value="incident.Reported_at" />
    </div>
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="title">Title:</label>
        <input type="text" id="title" class="form-control" @bind-value="incident.Title" />
    </div>
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="description">Description:</label>
        <input type="text" id="description" class="form-control" @bind-value="incident.Description" />
    </div>
        <div class="form-group" style="margin-bottom: 10px;">
        <label for="instancelocation">Instance Location:</label>
        <input type="text" id="instancelocation" class="form-control" @bind-value="incident.Instance_Location" />
    </div>
        <div class="form-group" style="margin-bottom: 10px;">
        <label for="instance">Instance:</label>
        <input type="text" id="instance" class="form-control" @bind-value="incident.Instance_Name" />
    </div>
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="incidenttype">Type:</label>
        <select id="incidenttype" class="form-control" style="width: 150px" @bind="incident.Incident_type">
            @{int i = 1;}
            @foreach (var item in incidenttypeArray)
            {
                <option value=@i>@item</option>
                i++;
            }
        </select>
    </div>
    <div class="form-group" style="margin-bottom: 10px; margin-top: 10px;">
        <label for="closed">Closed:</label>
        <input type="checkbox" id="closed" @bind="incident.Resolved">
    </div>
    <hr />
    <div class="form-group" style="margin-top: 10px;">
        <button type="button" class="btn btn-success" @onclick="cmdSave_Clicked">Save incident</button>
        <button type="button" class="btn btn-warning" @onclick="cmdEscalate_Clicked">Escalate</button>
        <span class="text-danger" style="margin-left: 10px; font-weight: bold">@escalateMessage</span>
    </div>

</div>


@code {

    private int id = 0;

    Incident incident = new Incident();
    string[] incidenttypeArray { get; set; } = new[] { "Ticket", "Issue", "Informational", "Problem" };

    string escalateMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (incident.Incident_id == 0) incident.Reporter = (await ProtectedSessionStore.GetAsync<string>("username")).Value ?? "";
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _id))
        {
            id = Convert.ToInt32(_id);
            if (id > 0) incident = new Incident(id);
        }
    }

    private void cmdSave_Clicked()
    {
        incident.Save();
        NavManager.NavigateTo("incidents");
    }

    private void cmdEscalate_Clicked()
    {
        //escalateMessage = "Sorry, not implemented";
        string EscalationEndpoint = Environment.GetEnvironmentVariable("escalate_endpoint") ?? "notset";

        Escalation esca = new Escalation();
        esca.instance = incident.Instance_Name;
        esca.zone = incident.Instance_Location;
        esca.message = incident.Description;

        if (EscalationEndpoint != "notset")
        {
            HttpClient client = new HttpClient();
            try
            {
                //client.BaseAddress = new Uri(EscalationEndpoint);
                var json = JsonSerializer.Serialize(esca);
                var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var response = client.PostAsync(EscalationEndpoint, content).Result;
                if (response.IsSuccessStatusCode) { Console.WriteLine("Instance Stopped"); }

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine("An exeption ocured");
            }
        }

        incident.Save();
        NavManager.NavigateTo("incidents");
    }
}
